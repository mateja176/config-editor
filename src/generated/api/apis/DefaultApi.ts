/* tslint:disable */
/* eslint-disable */
/**
 * Team Sava React Home Assignment
 * API Specification for frontend challenge in Team Sava
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse5XX,
    InlineResponse5XXFromJSON,
    InlineResponse5XXToJSON,
} from '../models';

export interface ConfigNameGetRequest {
    name: string;
    version: string;
}

export interface ConfigPostRequest {
    inlineObject2: InlineObject2;
}

export interface LoginPostRequest {
    inlineObject1: InlineObject1;
}

export interface RegisterPostRequest {
    inlineObject: InlineObject;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Lists all configuraions.
     */
    async configGetRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Lists all configuraions.
     */
    async configGet(): Promise<Array<object>> {
        const response = await this.configGetRaw();
        return await response.value();
    }

    /**
     * Retrieve specific configuration
     */
    async configNameGetRaw(requestParameters: ConfigNameGetRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling configNameGet.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling configNameGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/config/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Retrieve specific configuration
     */
    async configNameGet(requestParameters: ConfigNameGetRequest): Promise<InlineResponse2001> {
        const response = await this.configNameGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new configuraion
     */
    async configPostRaw(requestParameters: ConfigPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inlineObject2 === null || requestParameters.inlineObject2 === undefined) {
            throw new runtime.RequiredError('inlineObject2','Required parameter requestParameters.inlineObject2 was null or undefined when calling configPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.inlineObject2),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new configuraion
     */
    async configPost(requestParameters: ConfigPostRequest): Promise<void> {
        await this.configPostRaw(requestParameters);
    }

    /**
     * Creates a new user.
     */
    async loginPostRaw(requestParameters: LoginPostRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.inlineObject1 === null || requestParameters.inlineObject1 === undefined) {
            throw new runtime.RequiredError('inlineObject1','Required parameter requestParameters.inlineObject1 was null or undefined when calling loginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.inlineObject1),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Creates a new user.
     */
    async loginPost(requestParameters: LoginPostRequest): Promise<InlineResponse200> {
        const response = await this.loginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new user.
     */
    async registerPostRaw(requestParameters: RegisterPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inlineObject === null || requestParameters.inlineObject === undefined) {
            throw new runtime.RequiredError('inlineObject','Required parameter requestParameters.inlineObject was null or undefined when calling registerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new user.
     */
    async registerPost(requestParameters: RegisterPostRequest): Promise<void> {
        await this.registerPostRaw(requestParameters);
    }

}
